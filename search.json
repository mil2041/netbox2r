[{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"NetBoxR Tutorial","text":"netboxr package composes number functions retrive process genetic data large-scale genomics projects (e.g. TCGA projects) including mutations, copy number alterations, gene expression DNA methylation. netboxr package implements NetBox algorithm R package. NetBox algorithm integrates genetic alterations literature-curated pathway knowledge identify pathway modules cancer. NetBox algorithm uses (1) global network null model (2) local network null model access statistic significance discovered pathway modules.","code":""},{"path":[]},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"installation","dir":"Articles","previous_headings":"Basics","what":"Installation","title":"NetBoxR Tutorial","text":"","code":"BiocManager::install(\"netboxr\")"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"getting-started","dir":"Articles","previous_headings":"Basics","what":"Getting Started","title":"NetBoxR Tutorial","text":"Load netboxr package: list accessible vignettes methods available following command: help netboxr package functions, use one following command formats:","code":"library(netboxr) help(package=\"netboxr\") help(geneConnector) ?geneConnector"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"example-of-cerami-et-al--plos-one-2010","dir":"Articles","previous_headings":"","what":"Example of Cerami et al. PLoS One 2010","title":"NetBoxR Tutorial","text":"example reproduce network discovered Cerami et al.(2010). results presented comparable Cerami et al. 2010 though unadjusted p-values linker genes . unadjusted p-value linker genes Cerami et al. 2010 calculated probabiliy observed data point, Pr(X). netboxr used probability observed extreme assuming null hypothesis true, Pr(X>=x|H), unadjusted p-value linker genes. final number linker genes FDR correction netboxr result original Cerami et al. 2010.","code":""},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"load-human-interactions-network-hin-network","dir":"Articles","previous_headings":"Example of Cerami et al. PLoS One 2010","what":"Load Human Interactions Network (HIN) network","title":"NetBoxR Tutorial","text":"Load pre-defined HIN network simplify interactions removing loops duplicated interactions network. netowork reduction contains 9264 nodes 68111 interactions.","code":"data(netbox2010) sifNetwork <- netbox2010$network graphReduced <- networkSimplify(sifNetwork, directed = FALSE) ## Loading network of 9264 nodes and 157780 interactions ## Treated as undirected network ## Removing multiple interactions and loops ## Returning network of 9264 nodes and 68111 interactions"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"load-altered-gene-list","dir":"Articles","previous_headings":"Example of Cerami et al. PLoS One 2010","what":"Load altered gene list","title":"NetBoxR Tutorial","text":"altered gene list contains 517 candidates mutations copy number alterations.","code":"geneList <- as.character(netbox2010$geneList) length(geneList) ## [1] 517"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"map-altered-gene-list-on-hin-network","dir":"Articles","previous_headings":"Example of Cerami et al. PLoS One 2010","what":"Map altered gene list on HIN network","title":"NetBoxR Tutorial","text":"geneConnector function netboxr package takes altered gene list input maps genes curated network find local processes represented gene list.","code":"## Use Benjamini-Hochberg method to do multiple hypothesis correction for ## linker candidates.  ## Use edge-betweeness method to detect community structure in the network. threshold <- 0.05 results <- geneConnector(geneList = geneList, networkGraph = graphReduced, directed = FALSE,     pValueAdj = \"BH\", pValueCutoff = threshold, communityMethod = \"ebc\", keepIsolatedNodes = FALSE) ## 274 / 517 candidate nodes match the name in the network of 9264  ##                 nodes ## Only test neighbor nodes with local degree equals or exceeds 2 ## Multiple hypothesis corrections for 892 neighbor nodes in the network ## For p-value 0.05 cut-off, 6 nodes were included as linker nodes ## Connecting 274 candidate nodes and 6 linker nodes ## Remove 208 isolated candidate nodes from the input ## Final network contains 72 nodes and 152 interactions ## Detecting modules using \"edge betweeness\" method # Add edge annotations library(RColorBrewer) edges <- results$netboxOutput interactionType <- unique(edges[, 2]) interactionTypeColor <- brewer.pal(length(interactionType), name = \"Spectral\")  edgeColors <- data.frame(interactionType, interactionTypeColor, stringsAsFactors = FALSE) colnames(edgeColors) <- c(\"INTERACTION_TYPE\", \"COLOR\")   netboxGraphAnnotated <- annotateGraph(netboxResults = results, edgeColors = edgeColors,     directed = FALSE, linker = TRUE)  # Check the p-value of the selected linker linkerDF <- results$neighborData linkerDF[linkerDF$pValueFDR < threshold, ] ##         idx   name localDegree globalDegree    pValueRaw oddsRatio  pValueFDR ## CRK    1712    CRK          11           81 2.392088e-05  1.708732 0.01866731 ## IFNAR1 4546 IFNAR1           6           23 4.185496e-05  2.518726 0.01866731 ## CBL      20    CBL          14          140 6.505470e-05  1.361057 0.01934293 ## GAB1    500   GAB1           8           57 2.483197e-04  1.751122 0.04887827 ## CDK6    414   CDK6           5           21 3.008515e-04  2.406906 0.04887827 ## PTPN11   84 PTPN11          14          163 3.287776e-04  1.191405 0.04887827 # The geneConnector function returns a list of data frames. names(results) ## [1] \"netboxGraph\"      \"netboxCommunity\"  \"netboxOutput\"     \"nodeType\"         ## [5] \"moduleMembership\" \"neighborData\" # Plot graph with the Fruchterman-Reingold layout algorithm As an example, plot # both the original and the annotated graphs Save the layout for easier # comparison graph_layout <- layout_with_fr(results$netboxGraph)  # plot the original graph plot(results$netboxCommunity, results$netboxGraph, layout = graph_layout) # Plot the edge annotated graph plot(results$netboxCommunity, netboxGraphAnnotated, layout = graph_layout, vertex.size = 10,     vertex.shape = V(netboxGraphAnnotated)$shape, edge.color = E(netboxGraphAnnotated)$interactionColor,     edge.width = 3)  # Add interaction type annotations legend(\"bottomleft\", legend = interactionType, col = interactionTypeColor, lty = 1,     lwd = 2, bty = \"n\", cex = 1)"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"consistency-with-previously-published-results","dir":"Articles","previous_headings":"Example of Cerami et al. PLoS One 2010","what":"Consistency with Previously Published Results","title":"NetBoxR Tutorial","text":"GBM result netboxr identified exactly linker genes (6 linker genes), number modules (10 modules) genes identified module GBM result Cerami et al. 2010. results netboxr consistent previous implementation NetBox algorithm. RB1 PIK3R1 modules clearly represented figure. example, RB1 module contains genes blue color enclosed light orange circle. PIK3R1 module contains genes orange color enclosed pink circle.","code":""},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"statistical-significance-of-discovered-network","dir":"Articles","previous_headings":"","what":"Statistical Significance of Discovered Network","title":"NetBoxR Tutorial","text":"NetBox algorithm used (1) global network null model (2) local network null model access statistical significance discovered network.","code":""},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"global-network-null-model","dir":"Articles","previous_headings":"Statistical Significance of Discovered Network","what":"Global Network Null Model","title":"NetBoxR Tutorial","text":"global network null model calculates empirical p-value number times (set iterations) size largest connected component (giant component) network coming number randomly selected genes (number genes 274 example) equals exceeds size largest connected component observed network. suggested iterations 1000.","code":"## This function will need a lot of time to complete. globalTest <- globalNullModel(netboxGraph = results$netboxGraph, networkGraph = graphReduced,     iterations = 10, numOfGenes = 274)"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"local-network-null-model","dir":"Articles","previous_headings":"Statistical Significance of Discovered Network","what":"Local Network Null Model","title":"NetBoxR Tutorial","text":"Local network null model evaluates deviation modularity observed network modularity distribution random network. interaction, random network produced local re-wiring literature curated network. means nodes network kept degree connections connect new neighbors randomly. Suggested iterations 1000. 1000 iterations, can obtain mean standard deviation modularity local network null model. Using mean (~0.3) standard deviation (0.06), can covert observed modularity network (0.519) Z-score (~3.8). Z-score, can calculate one-tail p-value. one-tail pvalue less 0.05, observed modularity significantly different random. histogram, blue region distribution modularity local network null model. red vertical line observed modularity NetBox results.  global null model used assess global connectivity (number nodes edges) largest module identified network compared number randomly selected gene list. local null model used assess network modularity identified network compared random re-wired network.","code":"localTest <- localNullModel(netboxGraph = results$netboxGraph, iterations = 1000) ## ########### ## Based on 1000 random trails ## Random networks: mean modularity = 0.297 ## Random networks: sd modularity = 0.059 ## Observed network modularity is: 0.519 ## Observed network modularity z-score is: 3.74 ## One-tail p-value is: 9.185e-05 h <- hist(localTest$randomModularityScore, breaks = 35, plot = FALSE) h$density = h$counts/sum(h$counts) plot(h, freq = FALSE, ylim = c(0, 0.1), xlim = c(0.1, 0.6), col = \"lightblue\") abline(v = localTest$modularityScoreObs, col = \"red\")"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"view-module-membership","dir":"Articles","previous_headings":"","what":"View Module Membership","title":"NetBoxR Tutorial","text":"table shows module memberships genes.","code":"DT::datatable(results$moduleMembership, rownames = FALSE)"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"write-netbox-output-to-files","dir":"Articles","previous_headings":"","what":"Write NetBox Output to Files","title":"NetBoxR Tutorial","text":"","code":"# Write results for further visilaztion in the cytoscape software.  network.sif # file is the NetBox algorithm output in SIF format. write.table(results$netboxOutput, file = \"network.sif\", sep = \"\\t\", quote = FALSE,     col.names = FALSE, row.names = FALSE) # netighborList.txt file contains the information of all neighbor nodes. write.table(results$neighborData, file = \"neighborList.txt\", sep = \"\\t\", quote = FALSE,     col.names = TRUE, row.names = FALSE) # community.membership.txt file indicates the identified pathway module # numbers. write.table(results$moduleMembership, file = \"community.membership.txt\", sep = \"\\t\",     quote = FALSE, col.names = FALSE, row.names = FALSE) # nodeType.txt file indicates the node is 'linker' node or 'candidate' node. write.table(results$nodeType, file = \"nodeType.txt\", sep = \"\\t\", quote = FALSE, col.names = FALSE,     row.names = FALSE)"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"term-enrichment-in-modules-using-gene-ontology-go-analysis","dir":"Articles","previous_headings":"","what":"Term Enrichment in Modules using Gene Ontology (GO) Analysis","title":"NetBoxR Tutorial","text":"module identification, one main task understanding biological processes may represented returned modules. use Bioncoductor clusterProfiler enrichment analysis using GO Biological Process terms selected module.","code":"library(clusterProfiler) ## clusterProfiler v4.8.1  For help: https://yulab-smu.top/biomedical-knowledge-mining-book/ ##  ## If you use clusterProfiler in published research, please cite: ## T Wu, E Hu, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo, and G Yu. clusterProfiler 4.0: A universal enrichment tool for interpreting omics data. The Innovation. 2021, 2(3):100141 ##  ## Attaching package: 'clusterProfiler' ## The following object is masked from 'package:igraph': ##  ##     simplify ## The following object is masked from 'package:stats': ##  ##     filter library(org.Hs.eg.db) ## Loading required package: AnnotationDbi ## Loading required package: stats4 ## Loading required package: BiocGenerics ##  ## Attaching package: 'BiocGenerics' ## The following objects are masked from 'package:igraph': ##  ##     normalize, path, union ## The following objects are masked from 'package:stats': ##  ##     IQR, mad, sd, var, xtabs ## The following objects are masked from 'package:base': ##  ##     anyDuplicated, aperm, append, as.data.frame, basename, cbind, ##     colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, ##     get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply, ##     match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, ##     Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, ##     table, tapply, union, unique, unsplit, which.max, which.min ## Loading required package: Biobase ## Welcome to Bioconductor ##  ##     Vignettes contain introductory material; view with ##     'browseVignettes()'. To cite Bioconductor, see ##     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. ## Loading required package: IRanges ## Loading required package: S4Vectors ##  ## Attaching package: 'S4Vectors' ## The following object is masked from 'package:clusterProfiler': ##  ##     rename ## The following object is masked from 'package:utils': ##  ##     findMatches ## The following objects are masked from 'package:base': ##  ##     expand.grid, I, unname ##  ## Attaching package: 'IRanges' ## The following object is masked from 'package:clusterProfiler': ##  ##     slice ##  ## Attaching package: 'AnnotationDbi' ## The following object is masked from 'package:clusterProfiler': ##  ##     select ## module <- 6 selectedModule <- results$moduleMembership[results$moduleMembership$membership ==     module, ] geneList <- selectedModule$geneSymbol  # Check available ID types in for the org.Hs.eg.db annotation package keytypes(org.Hs.eg.db) ##  [1] \"ACCNUM\"       \"ALIAS\"        \"ENSEMBL\"      \"ENSEMBLPROT\"  \"ENSEMBLTRANS\" ##  [6] \"ENTREZID\"     \"ENZYME\"       \"EVIDENCE\"     \"EVIDENCEALL\"  \"GENENAME\"     ## [11] \"GENETYPE\"     \"GO\"           \"GOALL\"        \"IPI\"          \"MAP\"          ## [16] \"OMIM\"         \"ONTOLOGY\"     \"ONTOLOGYALL\"  \"PATH\"         \"PFAM\"         ## [21] \"PMID\"         \"PROSITE\"      \"REFSEQ\"       \"SYMBOL\"       \"UCSCKG\"       ## [26] \"UNIPROT\" ids <- bitr(geneList, fromType = \"SYMBOL\", toType = c(\"ENTREZID\"), OrgDb = \"org.Hs.eg.db\") ## 'select()' returned 1:1 mapping between keys and columns ## Warning in bitr(geneList, fromType = \"SYMBOL\", toType = c(\"ENTREZID\"), OrgDb = ## \"org.Hs.eg.db\"): 25% of input gene IDs are fail to map... head(ids) ##   SYMBOL ENTREZID ## 1  NUP50    10762 ## 3 NUP107    57122 ## 4  SNRPE     6635 ego <- enrichGO(gene = ids$ENTREZID, OrgDb = org.Hs.eg.db, ont = \"BP\", pAdjustMethod = \"BH\",     pvalueCutoff = 0.01, qvalueCutoff = 0.05, readable = TRUE)"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"enrichment-results","dir":"Articles","previous_headings":"Term Enrichment in Modules using Gene Ontology (GO) Analysis","what":"Enrichment Results","title":"NetBoxR Tutorial","text":"","code":"head(ego) ##                    ID                       Description GeneRatio   BgRatio ## GO:0051028 GO:0051028                    mRNA transport       2/3 130/18614 ## GO:0050657 GO:0050657            nucleic acid transport       2/3 160/18614 ## GO:0050658 GO:0050658                     RNA transport       2/3 160/18614 ## GO:0006606 GO:0006606       protein import into nucleus       2/3 163/18614 ## GO:0051236 GO:0051236 establishment of RNA localization       2/3 163/18614 ## GO:0051170 GO:0051170               import into nucleus       2/3 168/18614 ##                  pvalue    p.adjust       qvalue       geneID Count ## GO:0051028 0.0001445448 0.001811182 0.0003813015 NUP50/NUP107     2 ## GO:0050657 0.0002190370 0.001811182 0.0003813015 NUP50/NUP107     2 ## GO:0050658 0.0002190370 0.001811182 0.0003813015 NUP50/NUP107     2 ## GO:0006606 0.0002273296 0.001811182 0.0003813015 NUP50/NUP107     2 ## GO:0051236 0.0002273296 0.001811182 0.0003813015 NUP50/NUP107     2 ## GO:0051170 0.0002414910 0.001811182 0.0003813015 NUP50/NUP107     2"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"visualize-enrichment-results","dir":"Articles","previous_headings":"Term Enrichment in Modules using Gene Ontology (GO) Analysis","what":"Visualize Enrichment Results","title":"NetBoxR Tutorial","text":"","code":"dotplot(ego)"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"alternative-module-discovery-methods","dir":"Articles","previous_headings":"","what":"Alternative Module Discovery Methods","title":"NetBoxR Tutorial","text":"netboxr, used Girvan-Newman algorithm (communityMethod=“ebc”) default method detect community membership identified network. Girvan-Newman algorithm iteratativly removes edge network highest edge betweeness edges left. identified network contains many edges, Girvan-Newman algorithm spend large amount time remove edges re-calucalte edge betweenese score network. user get community detection result reasonable time, suggest switch leading eigenvector method (communityMethod=“lec”) community detection. Users can check original papers Girvan-Newman algorithm leading eigenvector method details.","code":""},{"path":[]},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"using-tabular-simple-interaction-format-sif-based-network-data","dir":"Articles","previous_headings":"Alternative Pathway Data","what":"Using Tabular Simple Interaction Format (SIF)-Based Network Data","title":"NetBoxR Tutorial","text":"Users can load alternative pathway data formatted SIF format (Simple Interaction Format). SIF space/tab separated format summarizes interactions graph edgelist. format, every row corresponds individual interaction (edge) source target node. NOTE: arbitrary interaction type can used, “interacts” true interaction type unknown. Resources, Functional Interaction network Reactome (https://reactome.org/download-data) StringDB (https://string-db.org/) provide network information formats reusable SIF. NOTE: next section demonstrates retrieve SIF-based networks many well-known interaction databases using paxtoolsr. SIF formatted data can passed networkSimplify(). result used geneConnector() function examples vignette demonstrate.","code":"PARTICIPANT_A INTERACTION_TYPE PARTICIPANT_B nodeA relationship nodeB nodeC relationship nodeA nodeD relationship nodeE example <- \"PARTICIPANT_A\\tINTERACTION_TYPE\\tPARTICIPANT_B TP53\\tinteracts\\tMDM2 MDM2\\tinteracts\\tMDM4\"  sif <- read.table(text = example, header = TRUE, sep = \"\\t\", stringsAsFactors = FALSE)  graphReduced <- networkSimplify(sif, directed = FALSE) ## Loading network of 3 nodes and 2 interactions ## Treated as undirected network ## Removing multiple interactions and loops ## Returning network of 3 nodes and 2 interactions"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"using-paxtoolsr-for-pathway-commons-data","dir":"Articles","previous_headings":"Alternative Pathway Data","what":"Using PaxtoolsR for Pathway Commons Data","title":"NetBoxR Tutorial","text":"Users can load alternative pathway data Pathway Commons repository using paxtoolsr package Bioconductor. pathway data represents update Pathway Commons data used original 2010 NetBox publication. example makes use data Reactome pathway database. NOTE: Downloaded data automatically cached avoid unnecessary downloads.","code":"library(paxtoolsr)  filename <- \"PathwayCommons.8.reactome.EXTENDED_BINARY_SIF.hgnc.txt.gz\" sif <- downloadPc2(filename, version = \"8\")   # Filter interactions for specific types interactionTypes <- getSifInteractionCategories()  filteredSif <- filterSif(sif$edges, interactionTypes = interactionTypes[[\"BetweenProteins\"]]) filteredSif <- filteredSif[(filteredSif$INTERACTION_TYPE %in% \"in-complex-with\"),     ]  # Re-run NetBox algorithm with new network graphReduced <- networkSimplify(filteredSif, directed = FALSE) geneList <- as.character(netbox2010$geneList)  threshold <- 0.05 pcResults <- geneConnector(geneList = geneList, networkGraph = graphReduced, directed = FALSE,     pValueAdj = \"BH\", pValueCutoff = threshold, communityMethod = \"lec\", keepIsolatedNodes = FALSE)  # Check the p-value of the selected linker linkerDF <- results$neighborData linkerDF[linkerDF$pValueFDR < threshold, ]  # The geneConnector function returns a list of data frames. names(results)  # plot graph with the Fruchterman-Reingold layout algorithm plot(results$netboxCommunity, results$netboxGraph, layout = layout_with_fr)"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"selecting-input-gene-lists-for-use-with-netbox","dir":"Articles","previous_headings":"","what":"Selecting Input Gene Lists for use with NetBox","title":"NetBoxR Tutorial","text":"main input NetBox algorithm input list “significantly” altered genes. project different, unique considerations significance considered may required. Researchers may seek stronger thresholds significance particular questions different profiling technologies may considerations. beyond scope work provide guidance situations. However, help users better understand process generating input gene list provide examples using best practices derived Cancer Genome Project using cBioPortal (http://cbioportal.org/), platform aggregates clinical genomics datasets standard representation. August 2020, cBioPortal approximately 290 studies. cases appropriate data available similar procedure example can used.","code":""},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"accesing-pre-computed-alteration-results-from-the-cbioportal-datahub","dir":"Articles","previous_headings":"Selecting Input Gene Lists for use with NetBox","what":"Accesing Pre-Computed Alteration Results from the cBioPortal DataHub","title":"NetBoxR Tutorial","text":"TCGA studies cBioPortal, users can access pre-processed datasets cBioPortal DataHub contain significantly altered genes mutations copy number. Example study link: https://github.com/cBioPortal/datahub/tree/master/public/acc_tcga Significantly altered genes mutations (via MutSig algorithm) accessible within ‘data_mutsig.txt’ file study; typically mutations q-value < 0.1 selected significantly altered Significantly altered genes copy number (via GISTIC algorithm) accessible within ‘data_gistic_genes_del.txt’ (deletions) file ‘data_gistic_genes_amp.txt’ (amplifications). Users directed accompanying study publications; study publication details ‘meta_study.txt’ file study.","code":""},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"accessing-cancer-genomics-data-from-cbioportal","dir":"Articles","previous_headings":"Selecting Input Gene Lists for use with NetBox","what":"Accessing Cancer Genomics Data from cBioPortal","title":"NetBoxR Tutorial","text":"Users can download cancer alteration data cBioPortal using cgdsr package CRAN. show simple example selecting genes use netboxr datasets provided cBioPortal using using 10% alteration frequency threshold select genes; general procedure previously used part TCGA studies. example, consider: mutations, mutations type contribute overall alteration frequency gene copy number, discretized GISTIC-derived values amplification deep deletions contribute overall alteration frequency resulting gene list becomes input netboxr. resulting gene list select EGFR TP53, high alteration frequencies glioblastoma (GBM) housekeeping genes ACTB GAPDH, low alteration frequencies.","code":"library(cBioPortalData)  cbio <- cBioPortal(hostname = \"www.cbioportal.org\", protocol = \"https\", api. = \"/api/api-docs\")  # Find available studies, caselists, and geneticProfiles studies <- getStudies(cbio) samps <- sampleLists(cbio, \"gbm_tcga_pub\")  # find samples with both mutation and copy number data caseList <- \"gbm_tcga_pub_cnaseq\" geneticProfileTables <- molecularProfiles(api = cbio, studyId = \"gbm_tcga_pub\")  genes <- c(\"EGFR\", \"TP53\", \"RB1\")  results <- sapply(genes, function(gene) {      message(sprintf(\"Work on %s gene\", gene))      cna <- getDataByGenes(cbio, studyId = \"gbm_tcga_pub\", genes = gene, by = \"hugoGeneSymbol\",         molecularProfileId = \"gbm_tcga_pub_cna_consensus\", sampleListId = caseList)      mut <- getDataByGenes(cbio, studyId = \"gbm_tcga_pub\", genes = gene, by = \"hugoGeneSymbol\",         molecularProfileId = \"gbm_tcga_pub_mutations\", sampleListId = caseList)      cna <- cbind(cna[[1]][5], cna[[1]][8])     mut <- cbind(mut[[1]][4], mut[[1]][14])     dat <- merge(cna, mut, by = \"sampleId\", all = TRUE)      cna <- dat$value      mut <- dat$proteinChange      tmp <- data.frame(cna = cna, mut = mut, stringsAsFactors = FALSE)     tmp$isAltered <- abs(tmp$cna) == 2 | !is.na(tmp$mut)  # Amplification or Deep Deletion or any mutation     freq <- length(which(tmp$isAltered))/nrow(tmp)      return(freq)  }, USE.NAMES = TRUE)  # 10 percent alteration frequency cutoff geneList <- names(results)[results > 0.1]"},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"NetBoxR Tutorial","text":"Cerami E, Demir E, Schultz N, Taylor BS, Sander C (2010) Automated Network Analysis Identifies Core Pathways Glioblastoma. PLoS ONE 5(2): e8918. doi:10.1371/journal.pone.0008918 Cerami EG, Gross , Demir E, Rodchenkov , Babur O, Anwar N, Schultz N, Bader GD, Sander C. Pathway Commons, web resource biological pathway data. Nucleic Acids Res. 2011 Jan;39(Database issue):D685-90. doi:10.1093/nar/gkq1039. Epub 2010 Nov 10.","code":""},{"path":"https://mil2041.github.io/netboxr/articles/netboxrTutorial.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"NetBoxR Tutorial","text":"","code":"sessionInfo() ## R version 4.3.0 (2023-04-21) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.2 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        ##  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    ##  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           ## [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    parallel  stats     graphics  grDevices utils     datasets  ## [8] methods   base      ##  ## other attached packages: ##  [1] org.Hs.eg.db_3.17.0   AnnotationDbi_1.62.1  IRanges_2.34.0        ##  [4] S4Vectors_0.38.1      Biobase_2.60.0        BiocGenerics_0.46.0   ##  [7] clusterProfiler_4.8.1 RColorBrewer_1.1-3    netboxr_1.7.2         ## [10] igraph_1.4.2          knitr_1.42            BiocStyle_2.28.0      ##  ## loaded via a namespace (and not attached): ##   [1] jsonlite_1.8.4          magrittr_2.0.3          farver_2.1.1            ##   [4] rmarkdown_2.21          fs_1.6.2                zlibbioc_1.46.0         ##   [7] ragg_1.2.5              vctrs_0.6.2             memoise_2.0.1           ##  [10] RCurl_1.98-1.12         ggtree_3.8.0            htmltools_0.5.5         ##  [13] gridGraphics_0.5-1      sass_0.4.6              KernSmooth_2.23-20      ##  [16] bslib_0.4.2             htmlwidgets_1.6.2       desc_1.4.2              ##  [19] plyr_1.8.8              cachem_1.0.8            lifecycle_1.0.3         ##  [22] pkgconfig_2.0.3         gson_0.1.0              Matrix_1.5-4            ##  [25] R6_2.5.1                fastmap_1.1.1           GenomeInfoDbData_1.2.10 ##  [28] digest_0.6.31           aplot_0.1.10            enrichplot_1.20.0       ##  [31] colorspace_2.1-0        patchwork_1.1.2         rprojroot_2.0.3         ##  [34] crosstalk_1.2.0         textshaping_0.3.6       RSQLite_2.3.1           ##  [37] labeling_0.4.2          fansi_1.0.4             httr_1.4.6              ##  [40] polyclip_1.10-4         compiler_4.3.0          bit64_4.0.5             ##  [43] withr_2.5.0             downloader_0.4          BiocParallel_1.34.1     ##  [46] viridis_0.6.3           DBI_1.1.3               highr_0.10              ##  [49] ggforce_0.4.1           gplots_3.1.3            MASS_7.3-58.4           ##  [52] HDO.db_0.99.1           gtools_3.9.4            caTools_1.18.2          ##  [55] tools_4.3.0             ape_5.7-1               scatterpie_0.1.9        ##  [58] glue_1.6.2              nlme_3.1-162            GOSemSim_2.26.0         ##  [61] shadowtext_0.1.2        grid_4.3.0              reshape2_1.4.4          ##  [64] fgsea_1.26.0            generics_0.1.3          gtable_0.3.3            ##  [67] tidyr_1.3.0             data.table_1.14.8       tidygraph_1.2.3         ##  [70] utf8_1.2.3              XVector_0.40.0          ggrepel_0.9.3           ##  [73] pillar_1.9.0            stringr_1.5.0           yulab.utils_0.0.6       ##  [76] splines_4.3.0           dplyr_1.1.2             tweenr_2.0.2            ##  [79] treeio_1.24.0           lattice_0.21-8          bit_4.0.5               ##  [82] tidyselect_1.2.0        GO.db_3.17.0            Biostrings_2.68.1       ##  [85] gridExtra_2.3           bookdown_0.34           xfun_0.39               ##  [88] graphlayouts_1.0.0      DT_0.27                 stringi_1.7.12          ##  [91] lazyeval_0.2.2          ggfun_0.0.9             yaml_2.3.7              ##  [94] evaluate_0.21           codetools_0.2-19        ggraph_2.1.0            ##  [97] tibble_3.2.1            qvalue_2.32.0           BiocManager_1.30.20     ## [100] ggplotify_0.1.0         cli_3.6.1               systemfonts_1.0.4       ## [103] munsell_0.5.0           jquerylib_0.1.4         Rcpp_1.0.10             ## [106] GenomeInfoDb_1.36.0     png_0.1-8               ellipsis_0.3.2          ## [109] pkgdown_2.0.7           ggplot2_3.4.2           blob_1.2.4              ## [112] DOSE_3.26.1             bitops_1.0-7            viridisLite_0.4.2       ## [115] tidytree_0.4.2          scales_1.2.1            purrr_1.0.1             ## [118] crayon_1.5.2            rlang_1.1.1             cowplot_1.1.1           ## [121] fastmatch_1.1-3         KEGGREST_1.40.0         formatR_1.14"},{"path":"https://mil2041.github.io/netboxr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eirc Minwei Liu. Maintainer.","code":""},{"path":"https://mil2041.github.io/netboxr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liu EM, Luna , Cerami E, Sander C (2023). netboxr: netboxr. R package version 1.7.2, https://mil2041.github.io/netboxr/.","code":"@Manual{,   title = {netboxr: netboxr},   author = {Eric Minwei Liu and Augustin Luna and Ethan Cerami and Chris Sander},   year = {2023},   note = {R package version 1.7.2},   url = {https://mil2041.github.io/netboxr/}, }"},{"path":[]},{"path":"https://mil2041.github.io/netboxr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"netboxr","text":"R package mark functional modules network analysis using data Pathway Commons.","code":""},{"path":"https://mil2041.github.io/netboxr/index.html","id":"installing-netboxr","dir":"","previous_headings":"","what":"Installing netboxr","title":"netboxr","text":"","code":"# Install library(remotes) remotes::install_github(repo=\"mil2041/netboxr\", ref=\"master\", build_vignette=TRUE, dependencies=TRUE)  # See vignette tutorial vignette(\"netboxrTutorial\")"},{"path":"https://mil2041.github.io/netboxr/reference/annotateGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate NetBox graph — annotateGraph","title":"Annotate NetBox graph — annotateGraph","text":"function annotates graph based user input.","code":""},{"path":"https://mil2041.github.io/netboxr/reference/annotateGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate NetBox graph — annotateGraph","text":"","code":"annotateGraph(   netboxResults,   edgeColors = NULL,   directed = FALSE,   linker = TRUE )"},{"path":"https://mil2041.github.io/netboxr/reference/annotateGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate NetBox graph — annotateGraph","text":"netboxResults Output geneConnector function. list returned netboxr results netboxGraph: igraph object NetBox algorithm identified network nodes connections netboxCommunity: igraph object network community assignment netboxOutput: data frame NetBox algorithm identified network nodes connections nodeType: data frame node types (\"candidate\" \"linker\") NetBox algorithm indentified network. moduleMembership: data frame module (community) membership. neighborData: data frame information nodes directly connected candidate gene nodes. edgeColors table containing hex color codes interaction types. first column interaction type second column hex color code. directed boolean value indicating whether NetBox algorithm identified network directed undirected (default = FALSE) linker boolean value indicating whether \"linker\" nodes exist NetBox algorithm identified network (default = TRUE)","code":""},{"path":"https://mil2041.github.io/netboxr/reference/annotateGraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate NetBox graph — annotateGraph","text":"annotated version netboxGraph","code":""},{"path":"https://mil2041.github.io/netboxr/reference/annotateGraph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate NetBox graph — annotateGraph","text":"table color codes interaction types provided, edges colored accordingly interaction types. directed TRUE, edges arrows directionality original input network NetBox. linker TRUE, linker nodes shown squares non-linker nodes stay circles.","code":""},{"path":"https://mil2041.github.io/netboxr/reference/annotateGraph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Annotate NetBox graph — annotateGraph","text":"Guanlan Dong, guanlan_dong@g.harvard.edu","code":""},{"path":"https://mil2041.github.io/netboxr/reference/annotateGraph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate NetBox graph — annotateGraph","text":"","code":"data(pathway_commons_v8_reactome) interaction_type_color <- read.csv(system.file(\"interaction_type.color.txt\", package = \"netboxr\"),                                    header=TRUE, sep=\"\\t\", stringsAsFactors=FALSE)  sifNetwork<-pathway_commons_v8_reactome$network graphReduced <- networkSimplify(sifNetwork,directed = FALSE) #> Loading network of 10433 nodes and 246590 interactions #> Treated as undirected network  #> Removing multiple interactions and loops #> Returning network of 10433 nodes and 213301 interactions  geneList <- pathway_commons_v8_reactome$geneList  results <- geneConnector(geneList = geneList, networkGraph = graphReduced,                           directed = FALSE, pValueAdj = \"BH\", pValueCutoff = 2e-5,                           communityMethod = \"ebc\", keepIsolatedNodes = FALSE) #> 189 / 354 candidate nodes match the name in the network of 10433  #>                 nodes  #> Only test neighbor nodes with local degree equals or exceeds 2 #> Multiple hypothesis corrections for 1944 neighbor nodes in the network #> For p-value 2e-05 cut-off, 9 nodes were included as linker nodes #> Connecting 189 candidate nodes and 9 linker nodes #> Remove 82 isolated candidate nodes from the input #> Final network contains 116 nodes and 336 interactions #> Detecting modules using \"edge betweeness\" method  netboxGraphAnnotated <- annotateGraph(netboxResults = results,                                       edgeColors = interaction_type_color,                                       directed = TRUE,                                       linker = TRUE)  # As an example, plot both the original and the annotated graphs ll <- layout_with_fr(results$netboxGraph) # Save the layout for easier comparison # Plot original graph pdf(\"originalGraph.pdf\", width = 50, height = 50) plot(results$netboxCommunity, results$netboxGraph, layout = ll,      vertex.size=3) dev.off() #> agg_png  #>       2  # Plot annotated graph pdf(\"annotatedGraph.pdf\", width = 50, height = 50) plot(results$netboxCommunity, netboxGraphAnnotated, layout = ll,      vertex.size = 3,      vertex.shape = V(netboxGraphAnnotated)$shape,      edge.color = E(netboxGraphAnnotated)$interactionColor,      edge.width = 3) # Add legend ind <- which(interaction_type_color$INTERACTION_TYPE %in% E(netboxGraphAnnotated)$interaction) legend_interaction_type <- interaction_type_color$INTERACTION_TYPE[ind] legend_interaction_type_color <- interaction_type_color$COLOR[ind] legend(x=-1.1, y=1.1,         legend=c(\"Candidate\", \"Linker\"),        pch=c(19, 15), # solid circle, filled square        pt.cex = 8,        bty=\"n\",        title=\"Node Types\",        cex=4, ncol=1) legend(x=-1.15, y=0.95,         legend=legend_interaction_type,        col = legend_interaction_type_color,        lty = 1, lwd = 10,        bty=\"n\",        title=\"Interaction Types (Edges)\",        cex=4, ncol=1) dev.off() #> agg_png  #>       2"},{"path":"https://mil2041.github.io/netboxr/reference/geneConnector.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate sub-network mapping from a list of candidate genes — geneConnector","title":"Generate sub-network mapping from a list of candidate genes — geneConnector","text":"function generates sub-network mapping list candidate genes","code":""},{"path":"https://mil2041.github.io/netboxr/reference/geneConnector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate sub-network mapping from a list of candidate genes — geneConnector","text":"","code":"geneConnector(   geneList,   networkGraph,   directed = FALSE,   pValueAdj = \"BH\",   pValueCutoff = 0.05,   communityMethod = \"ebc\",   keepIsolatedNodes = FALSE )"},{"path":"https://mil2041.github.io/netboxr/reference/geneConnector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate sub-network mapping from a list of candidate genes — geneConnector","text":"geneList character vector containing list candidate genes networkGraph igraph network graph object. igraph object contains curated network information directed boolean value indicating whether input network directed undirected (default = FALSE) pValueAdj string p-value correction method c(\"BH\", \"Bonferroni\") described details section (default = \"BH\") pValueCutoff numeric value p-value cutoff linker nodes (default = 0.05) communityMethod string community detection method c(\"ebc\",\"lec\") described details section (default = \"ebc\") keepIsolatedNodes boolean value indicating whether keep isolated nodes netboxr result (default = FALSE)","code":""},{"path":"https://mil2041.github.io/netboxr/reference/geneConnector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate sub-network mapping from a list of candidate genes — geneConnector","text":"list returned netboxr results netboxGraph: igraph object NetBox algorithm identified network nodes connections netboxCommunity: igraph object network community assignment netboxOutput: data frame NetBox algorithm identified network nodes connections nodeType: data frame node types (\"candidate\" \"linker\") NetBox algorithm indentified network. moduleMembership: data frame module (community) membership. neighborData: data frame information nodes directly connected candidate gene nodes.","code":""},{"path":"https://mil2041.github.io/netboxr/reference/geneConnector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate sub-network mapping from a list of candidate genes — geneConnector","text":"P-value correction methods include Bonferroni correction (\"bonferroni\") Benjamini & Hochberg (\"BH\"). Community detection methods include using edge betweeness score (\"ebc\") using leading eigenvector method (\"lec)","code":""},{"path":"https://mil2041.github.io/netboxr/reference/geneConnector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate sub-network mapping from a list of candidate genes — geneConnector","text":"Eric Minwei Liu, emliu.research@gmail.com","code":""},{"path":"https://mil2041.github.io/netboxr/reference/geneConnector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate sub-network mapping from a list of candidate genes — geneConnector","text":"","code":"data(netbox2010)  sifNetwork<-netbox2010$network graphReduced <- networkSimplify(sifNetwork,directed = FALSE)  #> Loading network of 9264 nodes and 157780 interactions #> Treated as undirected network  #> Removing multiple interactions and loops #> Returning network of 9264 nodes and 68111 interactions  geneList<-as.character(netbox2010$geneList)  results<-geneConnector(geneList=geneList,networkGraph=graphReduced,                       pValueAdj='BH',pValueCutoff=0.05,                       communityMethod='lec',keepIsolatedNodes=FALSE) #> 274 / 517 candidate nodes match the name in the network of 9264  #>                 nodes  #> Only test neighbor nodes with local degree equals or exceeds 2 #> Multiple hypothesis corrections for 892 neighbor nodes in the network #> For p-value 0.05 cut-off, 6 nodes were included as linker nodes #> Connecting 274 candidate nodes and 6 linker nodes #> Remove 208 isolated candidate nodes from the input #> Final network contains 72 nodes and 152 interactions #> Detecting modules using \"leading eigenvector\" method   names(results) #> [1] \"netboxGraph\"      \"netboxCommunity\"  \"netboxOutput\"     \"nodeType\"         #> [5] \"moduleMembership\" \"neighborData\"      plot(results$netboxGraph, layout = layout_with_fr)    write.table(results$netboxOutput,   file = \"network.sif\", sep = \"  \",   quote = FALSE, col.names = FALSE, row.names = FALSE )  write.table(results$neighborData,   file = \"neighborList.txt\", sep = \"  \",   quote = FALSE, col.names = TRUE, row.names = FALSE )  write.table(results$moduleMembership,   file = \"memb.ebc.txt\", sep = \"  \",   quote = FALSE, col.names = FALSE, row.names = FALSE ) # write.table(results$nodeType,   file = \"nodeType.txt\", sep = \"  \", quote = FALSE,   col.names = FALSE, row.names = FALSE ) #"},{"path":"https://mil2041.github.io/netboxr/reference/globalNullModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate global null model p-value — globalNullModel","title":"Generate global null model p-value — globalNullModel","text":"Randomly select number nodes largest connected component netbox result new gene candidate list repeat multiple times produce distribution node size edge numbers. distribution used produce global p-value netbox result based node size edge numbers largest component final network result.","code":""},{"path":"https://mil2041.github.io/netboxr/reference/globalNullModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate global null model p-value — globalNullModel","text":"","code":"globalNullModel(   netboxGraph,   networkGraph,   directed,   iterations = 30,   numOfGenes = NULL,   pValueAdj = \"BH\",   pValueCutoff = 0.05 )"},{"path":"https://mil2041.github.io/netboxr/reference/globalNullModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate global null model p-value — globalNullModel","text":"netboxGraph igraph network graph object. igraph object contains NetBox algorithm identified network geneConnector function networkGraph igraph network graph object. igraph object contains curated network information directed boolean value indicating whether input network directed undirected (default = FALSE) iterations numeric value number iterations numOfGenes numeric value number genes mapped initial network pValueAdj string p-value correction method c(\"BH\", \"Bonferroni\") described details section (default = \"BH\") pValueCutoff numeric value p-value cutoff linker nodes (default = 0.05)","code":""},{"path":"https://mil2041.github.io/netboxr/reference/globalNullModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate global null model p-value — globalNullModel","text":"list returned results globalNull: data frame global randomization results globalNodesResult: data frame global null tested results based nodes globalEdgesResult: data frame global null tested results based edges","code":""},{"path":"https://mil2041.github.io/netboxr/reference/globalNullModel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate global null model p-value — globalNullModel","text":"P-value correction methods include Bonferroni correction (\"bonferroni\") Benjamini & Hochberg (\"BH\").","code":""},{"path":"https://mil2041.github.io/netboxr/reference/globalNullModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate global null model p-value — globalNullModel","text":"Eric Minwei Liu, emliu.research@gmail.com","code":""},{"path":"https://mil2041.github.io/netboxr/reference/globalNullModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate global null model p-value — globalNullModel","text":"","code":"data(netbox2010)  sifNetwork<-netbox2010$network graphReduced <- networkSimplify(sifNetwork,directed = FALSE)  #> Loading network of 9264 nodes and 157780 interactions #> Treated as undirected network  #> Removing multiple interactions and loops #> Returning network of 9264 nodes and 68111 interactions  geneList<-as.character(netbox2010$geneList)  results<-geneConnector(geneList=geneList,networkGraph=graphReduced,                       pValueAdj='BH',pValueCutoff=0.05,                       communityMethod='lec',keepIsolatedNodes=FALSE) #> 274 / 517 candidate nodes match the name in the network of 9264  #>                 nodes  #> Only test neighbor nodes with local degree equals or exceeds 2 #> Multiple hypothesis corrections for 892 neighbor nodes in the network #> For p-value 0.05 cut-off, 6 nodes were included as linker nodes #> Connecting 274 candidate nodes and 6 linker nodes #> Remove 208 isolated candidate nodes from the input #> Final network contains 72 nodes and 152 interactions #> Detecting modules using \"leading eigenvector\" method  names(results) #> [1] \"netboxGraph\"      \"netboxCommunity\"  \"netboxOutput\"     \"nodeType\"         #> [5] \"moduleMembership\" \"neighborData\"      # Suggested 100 iterations.  # Use 5 interations in the exampel to save running time. # globalTest <- globalNullModel(netboxGraph=results$netboxGraph,  #                              networkGraph=graphReduced,  #                              iterations=5, numOfGenes = 274)"},{"path":"https://mil2041.github.io/netboxr/reference/localNullModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate local null model p-value — localNullModel","title":"Generate local null model p-value — localNullModel","text":"function keeps number connections nodes graph rewires partners connections produces  modularity score. repeats multiple time, modularity score distribution used produce netbox loacl p-value.","code":""},{"path":"https://mil2041.github.io/netboxr/reference/localNullModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate local null model p-value — localNullModel","text":"","code":"localNullModel(netboxGraph, iterations = 30)"},{"path":"https://mil2041.github.io/netboxr/reference/localNullModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate local null model p-value — localNullModel","text":"netboxGraph igraph network graph object. igraph object contains NetBox algorithm identified network geneConnector function iterations numeric value number iterations","code":""},{"path":"https://mil2041.github.io/netboxr/reference/localNullModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate local null model p-value — localNullModel","text":"list returned results randomModularityScore: vector modularity scores iterations local re-wiring randomization process randomMean: numeric value mean modularity scores iterations local re-wiring randomization process randomSD: numeric value standard deviation modularity scores iterations local re-wiring randomization process modularityScoreObs: numeric value observed modularity score NetBox algorithm identified network zScore: numeric value z-score pValueObs: numeric value observed p-value","code":""},{"path":"https://mil2041.github.io/netboxr/reference/localNullModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate local null model p-value — localNullModel","text":"Eric Minwei Liu, emliu.research@gmail.com","code":""},{"path":"https://mil2041.github.io/netboxr/reference/localNullModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate local null model p-value — localNullModel","text":"","code":"data(netbox2010)  sifNetwork<-netbox2010$network graphReduced <- networkSimplify(sifNetwork,directed = FALSE)  #> Loading network of 9264 nodes and 157780 interactions #> Treated as undirected network  #> Removing multiple interactions and loops #> Returning network of 9264 nodes and 68111 interactions  geneList<-as.character(netbox2010$geneList)  results<-geneConnector(geneList=geneList,networkGraph=graphReduced,                       pValueAdj='BH',pValueCutoff=0.05,                       communityMethod='lec',keepIsolatedNodes=FALSE) #> 274 / 517 candidate nodes match the name in the network of 9264  #>                 nodes  #> Only test neighbor nodes with local degree equals or exceeds 2 #> Multiple hypothesis corrections for 892 neighbor nodes in the network #> For p-value 0.05 cut-off, 6 nodes were included as linker nodes #> Connecting 274 candidate nodes and 6 linker nodes #> Remove 208 isolated candidate nodes from the input #> Final network contains 72 nodes and 152 interactions #> Detecting modules using \"leading eigenvector\" method  names(results) #> [1] \"netboxGraph\"      \"netboxCommunity\"  \"netboxOutput\"     \"nodeType\"         #> [5] \"moduleMembership\" \"neighborData\"      # Suggested 1000 iterations.  # Use 10 interations in the exampel to save running time.  localTest <- localNullModel(netboxGraph=results$netboxGraph, iterations=10) #> ########### #> Based on 10 random trails #> Random networks: mean modularity = 0.308 #> Random networks: sd modularity = 0.049 #> Observed network modularity is: 0.519 #> Observed network modularity z-score is: 4.348 #> One-tail p-value is: 6.861e-06"},{"path":"https://mil2041.github.io/netboxr/reference/netbox2010.html","id":null,"dir":"Reference","previous_headings":"","what":"network coming with Cerami et al. PLoS One 2010 paper. — netbox2010","title":"network coming with Cerami et al. PLoS One 2010 paper. — netbox2010","text":"Loading netbox2010 containing 9264 nodes 68111 interactions. Treated undirected network. removing multiple interactions loops. Returning igraph network 9264 nodes 68111 interactions.","code":""},{"path":"https://mil2041.github.io/netboxr/reference/netbox2010.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"network coming with Cerami et al. PLoS One 2010 paper. — netbox2010","text":"","code":"netbox2010"},{"path":"https://mil2041.github.io/netboxr/reference/netbox2010.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"network coming with Cerami et al. PLoS One 2010 paper. — netbox2010","text":"data frame 9264 nodes 68111 interactions: name vertex gene name edges interaction types","code":""},{"path":"https://mil2041.github.io/netboxr/reference/netbox2010.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"network coming with Cerami et al. PLoS One 2010 paper. — netbox2010","text":"https://www.ncbi.nlm.nih.gov/pubmed/20169195","code":""},{"path":"https://mil2041.github.io/netboxr/reference/netbox2010.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"network coming with Cerami et al. PLoS One 2010 paper. — netbox2010","text":"data.frame","code":""},{"path":"https://mil2041.github.io/netboxr/reference/networkSimplify.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify sif network into igraph network graph object — networkSimplify","title":"Simplify sif network into igraph network graph object — networkSimplify","text":"function removes duplicated edges loops create igraph graph object tab delimited sif formatted network file.","code":""},{"path":"https://mil2041.github.io/netboxr/reference/networkSimplify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify sif network into igraph network graph object — networkSimplify","text":"","code":"networkSimplify(sifNetwork, directed = FALSE)"},{"path":"https://mil2041.github.io/netboxr/reference/networkSimplify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify sif network into igraph network graph object — networkSimplify","text":"sifNetwork file sif network format (three columns file separated tab, nodeA interactionType nodeB ) directed Logical, treat network directed undirected graph","code":""},{"path":"https://mil2041.github.io/netboxr/reference/networkSimplify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify sif network into igraph network graph object — networkSimplify","text":"igraph graph object","code":""},{"path":"https://mil2041.github.io/netboxr/reference/networkSimplify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplify sif network into igraph network graph object — networkSimplify","text":"undirected graph, networkSimplify removes duplicated edges loops create igraph graph object tab delimited sif formatted network file. directed graph, networkSimplify selects first edge removes rest duplicated edges loops create igraph graph object tab delimited sif formatted network file.","code":""},{"path":"https://mil2041.github.io/netboxr/reference/networkSimplify.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simplify sif network into igraph network graph object — networkSimplify","text":"Eric Minwei Liu, emliu.research@gmail.com","code":""},{"path":"https://mil2041.github.io/netboxr/reference/networkSimplify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplify sif network into igraph network graph object — networkSimplify","text":"","code":"data(netbox2010)  sifNetwork <- netbox2010$network graphReduced <- networkSimplify(sifNetwork, directed = FALSE) #> Loading network of 9264 nodes and 157780 interactions #> Treated as undirected network  #> Removing multiple interactions and loops #> Returning network of 9264 nodes and 68111 interactions"},{"path":"https://mil2041.github.io/netboxr/reference/pathway_commons_v8_reactome.html","id":null,"dir":"Reference","previous_headings":"","what":"Pathway Commons V8 Reactome — pathway_commons_v8_reactome","title":"Pathway Commons V8 Reactome — pathway_commons_v8_reactome","text":"Contains example gene list Pathway Commons V8 Reactome dataset annotateGraph().","code":""},{"path":"https://mil2041.github.io/netboxr/reference/pathway_commons_v8_reactome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pathway Commons V8 Reactome — pathway_commons_v8_reactome","text":"","code":"pathway_commons_v8_reactome"},{"path":"https://mil2041.github.io/netboxr/reference/pathway_commons_v8_reactome.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pathway Commons V8 Reactome — pathway_commons_v8_reactome","text":"list 354 genes data frame 246590 interactions geneList example list genes network Pathway Commons V8 Reactome","code":""},{"path":"https://mil2041.github.io/netboxr/reference/pathway_commons_v8_reactome.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pathway Commons V8 Reactome — pathway_commons_v8_reactome","text":"https://www.pathwaycommons.org","code":""},{"path":"https://mil2041.github.io/netboxr/reference/pathway_commons_v8_reactome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pathway Commons V8 Reactome — pathway_commons_v8_reactome","text":"list two elements.","code":""}]
